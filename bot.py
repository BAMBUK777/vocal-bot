# bot.py ‚Äî Telegram-–±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤–æ–∫–∞–ª
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: RU/EN/KA, –∑–∞–ø–∏—Å—å, –æ—Ç–º–µ–Ω—É, –ø–µ—Ä–µ–Ω–æ—Å, –∞–¥–º–∏–Ω–∫—É, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è,
# –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –æ—Ç–∑—ã–≤—ã, –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫—É, Health-check –Ω–∞ —Ñ–µ–π–∫–æ–≤–æ–º –ø–æ—Ä—Ç—É.

import os
import json
import csv
import logging
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from telebot import types

# ==== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====
TZ = ZoneInfo("Asia/Tbilisi")
DATA_DIR       = "data"
LANG_FILE      = os.path.join(DATA_DIR, "lang.json")
SCHEDULE_FILE  = os.path.join(DATA_DIR, "schedule.json")
TRANSFERS_FILE = os.path.join(DATA_DIR, "transfers.json")
RECORDS_FILE   = os.path.join(DATA_DIR, "records.csv")
FEEDBACK_FILE  = os.path.join(DATA_DIR, "feedback.csv")
LOG_FILE       = os.path.join(DATA_DIR, "bot.log")
# –§–µ–π–∫–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è Render (Web Service)
HEALTH_PORT    = int(os.environ.get("PORT", 8088))

# Telegram-—Ç–æ–∫–µ–Ω
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ê–¥–º–∏–Ω—ã: {user_id: "username"}
ADMINS = {
    388183067: "joolay_joolay",
    7758773154: "joolay_vocal"
}

# –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
TEACHERS = {
    "–Æ–ª—è":     {"wd": [1,2,3,4], "hours": [f"{h}:00" for h in range(15,21)]},
    "–¢–æ—Ä–Ω–∏–∫–µ": {"wd": [5,6,0],   "hours": [f"{h}:00" for h in range(8,23)]},
}

# –Ø–∑—ã–∫–∏
LANGUAGES = ["ru","en","ka"]
LANG_NAMES = {"ru":"–†—É—Å—Å–∫–∏–π üá∑üá∫","en":"English üá¨üáß","ka":"·É•·Éê·É†·Éó·É£·Éö·Éò üá¨üá™"}
DEFAULT_LANG = "ru"

# –ö–æ—Ä–æ—Ç–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
WD_SHORT = {0:"–ø–Ω",1:"–≤—Ç",2:"—Å—Ä",3:"—á—Ç",4:"–ø—Ç",5:"—Å–±",6:"–≤—Å"}

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
  "ru": {
    "choose_lang":   "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    "lang_set":      "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}",
    "main_menu":     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    "btn_book":      "üìÜ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
    "btn_my":        "üëÅ –ú–æ—è –∑–∞–ø–∏—Å—å",
    "btn_transfer":  "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏",
    "btn_cancel":    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
    "btn_help":      "/help",
    "btn_admin":     "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞",
    "cancel_q":      "‚ùó –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?",
    "cancel_ok":     "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    "no_booking":    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
    "pending":       "‚è≥ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
    "confirmed":     "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {teacher} {date} {time}",
    "admin_notify":  "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {teacher} {date} {time}\nüë§ {name} (ID {uid})",
    "rem_before":    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É—Ä–æ–∫ —É {teacher} {date}, {time}",
    "feedback_req":  "üìù –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–∫ —É {teacher} {date}, {time} (1‚Äì5 –∑–≤–µ–∑–¥):",
    "ask_comment":   "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
    "thank_comment": "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!",
    "transfer_q":    "‚ùó –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å?",
    "admin_transfer_notify": "üîÅ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å: {teacher} {date} {time} ‚Üí {new_teacher} {new_date} {new_time}\nüë§ {name} (ID {uid})",
    "admin_panel":   "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
    "view_bookings": "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏",
    "view_transfers":"üîÅ –ü–µ—Ä–µ–Ω–æ—Å—ã",
    "view_feedback": "‚úçÔ∏è –û—Ç–∑—ã–≤—ã",
    "approve":       "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
    "delete":        "üóë –£–¥–∞–ª–∏—Ç—å",
    "no_pending":    "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
  },
  "en": {
    # (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è English)
    "choose_lang": "üëã Hi! Choose language:",
    # ...
  },
  "ka": {
    # (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ)
  }
}

# ==== –ü–û–î–ì–û–¢–û–í–ö–ê –§–ê–ô–õ–û–í ====
os.makedirs(DATA_DIR, exist_ok=True)
def ensure_json(path):
    if not os.path.exists(path):
        with open(path,"w",encoding="utf-8") as f:
            json.dump({},f,ensure_ascii=False,indent=2)
for p in [LANG_FILE, SCHEDULE_FILE, TRANSFERS_FILE]:
    ensure_json(p)
def ensure_csv(path, headers):
    if not os.path.exists(path):
        with open(path,"w",newline="",encoding="utf-8") as f:
            csv.writer(f).writerow(headers)
ensure_csv(RECORDS_FILE,   ["ts","teacher","date","time","uid","name","status"])
ensure_csv(FEEDBACK_FILE,  ["ts","teacher","date","time","uid","stars","text","approved"])

logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s %(levelname)s %(message)s")

# ==== Health-check –¥–ª—è Render (–æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç) ====
class HC(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")
threading.Thread(target=lambda: HTTPServer(("0.0.0.0",HEALTH_PORT),HC).serve_forever(),
                 daemon=True).start()

# ==== –£–¢–ò–õ–ò–¢–´ ====
def load_json(path):
    return json.load(open(path,"r",encoding="utf-8"))
def save_json(data,path):
    json.dump(data,open(path,"w",encoding="utf-8"),ensure_ascii=False,indent=2)

def get_lang(uid):
    langs = load_json(LANG_FILE)
    return langs.get(str(uid),DEFAULT_LANG)
def set_lang(uid,code):
    langs = load_json(LANG_FILE)
    langs[str(uid)] = code
    save_json(langs, LANG_FILE)

def msg(uid,key,**kw):
    lang = get_lang(uid)
    template = MESSAGES.get(lang, MESSAGES[DEFAULT_LANG]).get(key,"")
    return template.format(**kw)

def main_keyboard(uid):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(msg(uid,"btn_book"), msg(uid,"btn_my"))
    kb.add(msg(uid,"btn_transfer"), msg(uid,"btn_cancel"))
    kb.add(msg(uid,"btn_help"))
    if uid in ADMINS:
        kb.add(msg(uid,"btn_admin"))
    return kb

# ==== –°–û–ë–´–¢–ò–Ø ====
STATE = {}  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è {uid: {...}}

@bot.message_handler(commands=["start","help"])
def cmd_start(m):
    uid = m.from_user.id
    # —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —è–∑—ã–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    langs = load_json(LANG_FILE)
    langs.pop(str(uid),None)
    save_json(langs, LANG_FILE)
    # –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —è–∑—ã–∫–∏
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for c in LANGUAGES:
        kb.add(LANG_NAMES[c])
    bot.send_message(uid, msg(uid,"choose_lang"), reply_markup=kb)

@bot.message_handler(func=lambda m: m.text in LANG_NAMES.values())
def choose_language(m):
    uid = m.from_user.id
    code = next(k for k,v in LANG_NAMES.items() if v==m.text)
    set_lang(uid,code)
    bot.send_message(uid, msg(uid,"lang_set",lang=m.text),
                     reply_markup=main_keyboard(uid))

@bot.message_handler(func=lambda m: True)
def main_router(m):
    uid = m.from_user.id
    txt = m.text
    if txt == msg(uid,"btn_book"):
        start_booking(m)
    elif txt == msg(uid,"btn_my"):
        show_my(m)
    elif txt == msg(uid,"btn_cancel"):
        ask_cancel(m)
    elif txt == msg(uid,"btn_transfer"):
        start_transfer(m)
    elif txt == msg(uid,"btn_help"):
        bot.send_message(uid, msg(uid,"help"), reply_markup=main_keyboard(uid))
    elif txt == msg(uid,"btn_admin") and uid in ADMINS:
        admin_panel(m)
    else:
        bot.send_message(uid, msg(uid,"main_menu"), reply_markup=main_keyboard(uid))

# ==== –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ====
def start_booking(m):
    uid = m.from_user.id
    kb = types.InlineKeyboardMarkup()
    for tch in TEACHERS:
        kb.add(types.InlineKeyboardButton(tch, callback_data=f"bk_tch|{tch}"))
    bot.send_message(uid, msg(uid,"btn_book"), reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("bk_"))
def bk_flow(c):
    uid = c.from_user.id
    step,data = c.data.split("|",1)
    st = STATE.setdefault(str(uid),{})
    if step=="bk_tch":
        st["tch"]=data
        # –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="bk_wk|0"))
        kb.add(types.InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="bk_wk|1"))
        c.message.edit_text(f"{data}: –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏", reply_markup=kb)
    elif step=="bk_wk":
        st["wk"]=int(data)
        tch = st["tch"]
        # –¥–∞—Ç—ã
        today = datetime.now(TZ).date()
        mon = today - timedelta(days=today.weekday()) + timedelta(weeks=st["wk"])
        dates = []
        for i in range(7):
            d = mon+timedelta(i)
            if d.weekday() in TEACHERS[tch]["wd"] and d>=today:
                dates.append(d)
        kb = types.InlineKeyboardMarkup(row_width=3)
        for d in dates:
            kb.add(types.InlineKeyboardButton(
                f"{d.strftime('%d.%m')} ({WD_SHORT[d.weekday()]})",
                callback_data=f"bk_day|{d.isoformat()}"))
        c.message.edit_text(msg(uid,"choose_day"), reply_markup=kb)
    elif step=="bk_day":
        st["date"]=data
        tch = st["tch"]
        kb=types.InlineKeyboardMarkup(row_width=2)
        sch = load_json(SCHEDULE_FILE)
        taken_today = sch.get(tch,{}).get(data,{}).keys()
        for h in TEACHERS[tch]["hours"]:
            if h not in taken_today:
                kb.add(types.InlineKeyboardButton(h, callback_data=f"bk_time|{h}"))
        c.message.edit_text(msg(uid,"choose_time"), reply_markup=kb)
    elif step=="bk_time":
        st["time"]=data
        bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        bot.register_next_step_handler(
            bot.send_message(uid, "–ò–º—è:"), finish_booking)

def finish_booking(m):
    uid = m.from_user.id
    name = m.text.strip()
    st = STATE.get(str(uid),{})
    tch, date, time = st["tch"], st["date"], st["time"]
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ schedule.json
    sch = load_json(SCHEDULE_FILE)
    sch.setdefault(tch,{}).setdefault(date,{})[time] = {"uid":uid,"name":name,"status":"pending"}
    save_json(sch, SCHEDULE_FILE)
    # CSV
    with open(RECORDS_FILE,"a",newline="",encoding="utf-8") as f:
        csv.writer(f).writerow([
            datetime.now(TZ).isoformat(), tch, date, time, uid, name, "pending"
        ])
    # —É–≤–µ–¥–æ–º–∏—Ç—å —é–∑–µ—Ä–∞
    bot.send_message(uid, msg(uid,"pending"), reply_markup=main_keyboard(uid))
    # —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
    for aid in ADMINS:
        bot.send_message(aid, msg(uid,"admin_notify",
            teacher=tch, date=date, time=time, name=name, uid=uid))
    STATE.pop(str(uid),None)

# ==== –ú–û–Ø –ó–ê–ü–ò–°–¨ ====
def show_my(m):
    uid = m.from_user.id
    sch = load_json(SCHEDULE_FILE)
    lines=[]
    for tch,dd in sch.items():
        for d,hh in dd.items():
            for h,info in hh.items():
                if info["uid"]==uid:
                    lines.append(f"{tch}: {d} {h} ({info['status']})")
    bot.send_message(uid, "\n".join(lines) or msg(uid,"no_booking"),
                     reply_markup=main_keyboard(uid))

# ==== –û–¢–ú–ï–ù–ê ====
def ask_cancel(m):
    uid=m.from_user.id
    kb=types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞",callback_data="cnf_yes"))
    kb.add(types.InlineKeyboardButton("–ù–µ—Ç",callback_data="cnf_no"))
    bot.send_message(uid,msg(uid,"cancel_q"),reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("cnf_"))
def cancel_flow(c):
    uid=c.from_user.id
    if c.data=="cnf_yes":
        sch=load_json(SCHEDULE_FILE)
        # —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
        for tch,dd in sch.items():
            for d,hh in dd.items():
                for h,info in list(hh.items()):
                    if info["uid"]==uid:
                        del sch[tch][d][h]
                        save_json(sch,SCHEDULE_FILE)
                        bot.send_message(uid,msg(uid,"cancel_ok"),reply_markup=main_keyboard(uid))
                        return
        bot.send_message(uid,msg(uid,"no_booking"),reply_markup=main_keyboard(uid))
    else:
        bot.send_message(uid,msg(uid,"main_menu"),reply_markup=main_keyboard(uid))

# ==== –ü–ï–†–ï–ù–û–° (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –±—Ä–æ–Ω–∏) ====
def start_transfer(m):
    uid=m.from_user.id
    # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —ç—Ç–∞–ø–∞–º –±—Ä–æ–Ω–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ transfers.json –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    bot.send_message(uid,"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",reply_markup=main_keyboard(uid))

# ==== –ê–î–ú–ò–ù–ö–ê ====
def admin_panel(m):
    uid=m.from_user.id
    kb=types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton(msg(uid,"view_bookings"),callback_data="ad_book"))
    kb.add(types.InlineKeyboardButton(msg(uid,"view_feedback"),callback_data="ad_fb"))
    kb.add(types.InlineKeyboardButton(msg(uid,"view_transfers"),callback_data="ad_tr"))
    bot.send_message(uid,msg(uid,"admin_panel"),reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("ad_"))
def admin_flow(c):
    uid=c.from_user.id; cmd=c.data
    if cmd=="ad_book":
        sch=load_json(SCHEDULE_FILE)
        text="–í—Å–µ –∑–∞–ø–∏—Å–∏:\n"
        for tch,dd in sch.items():
            for d,hh in dd.items():
                for h,info in hh.items():
                    text+=f"{tch} {d} {h} ‚Äî {info['name']} ({info['status']})\n"
        c.message.edit_text(text or "–ü—É—Å—Ç–æ",reply_markup=None)
    # feedback –∏ transfers –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...

# ==== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò –ê–í–¢–û-–û–ß–ò–°–¢–ö–ê ====
def schedule_tasks():
    def worker():
        while True:
            now = datetime.now(TZ)
            sch = load_json(SCHEDULE_FILE)
            # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á
            for tch,dd in sch.items():
                for d,hh in dd.items():
                    dt = datetime.fromisoformat(d+"T00:00:00").replace(tzinfo=TZ)
                    for h,info in hh.items():
                        lesson = dt + timedelta(hours=int(h.split(":")[0]))
                        if 0 < (lesson-now).total_seconds() < 7200 and info["status"]=="confirmed":
                            for uid in [info["uid"]]:
                                bot.send_message(uid,msg(uid,"rem_before",
                                    teacher=tch,date=d,time=h))
                            info["status"]="notified"
            save_json(sch,SCHEDULE_FILE)
            # –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ >14 –¥–Ω–µ–π
            cutoff = now.date() - timedelta(days=14)
            changed=False
            for tch in list(sch):
                for d in list(sch[tch]):
                    if datetime.fromisoformat(d).date() < cutoff:
                        del sch[tch][d]; changed=True
            if changed:
                save_json(sch,SCHEDULE_FILE)
            threading.Event().wait(3600)  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å
    threading.Thread(target=worker,daemon=True).start()

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏
schedule_tasks()

# ==== –°–¢–ê–†–¢ –ë–û–¢–ê ====
bot.send_message(list(ADMINS.keys())[0], "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
bot.infinity_polling()
