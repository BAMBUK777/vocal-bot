import os
import json
import csv
import logging
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime, timedelta, date
from zoneinfo import ZoneInfo
from threading import Timer

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ö–û–ù–°–¢–ê–ù–¢–´ / –®–ê–ë–õ–û–ù–´ ===
TZ = ZoneInfo("Asia/Tbilisi")
DATA_DIR = "data"
SCHEDULE_FILE = os.path.join(DATA_DIR, "schedule.json")
RECORDS_FILE = os.path.join(DATA_DIR, "records.csv")
LOG_FILE     = os.path.join(DATA_DIR, "bot.log")

MESSAGES = {
    "start": (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤–æ–∫–∞–ª.\n\n"
        "‚ùì –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: –Ω–∞–∂–º–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª –∏ —Å–ª–µ–¥—É–π –º–µ–Ω—é.\n"
        "‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –Ω–∞–∂–º–∏ /help."
    ),
    "help": (
        "/start ‚Äì –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äì –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
        "–ú–æ—è –∑–∞–ø–∏—Å—å ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –±—Ä–æ–Ω—å\n"
        "–û—Ç–º–µ–Ω–∏—Ç—å ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –±—Ä–æ–Ω—å\n"
    ),
    "booking_confirmed": "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {teacher} {date}, {hour}",
    "reminder_before": "üîî –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É—Ä–æ–∫ —É {teacher} –≤ {date}, {hour}",
    "reminder_after": (
        "‚úÖ –£—Ä–æ–∫ —É {teacher} –≤ {date}, {hour} –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
        "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ä–µ—à–∏—à—å –µ—â—ë ‚Äì –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è üòâ"
    ),
    "admin_new": "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {teacher} {date}, {hour}\nüë§ {name} (ID {uid})",
}

# === –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
if not os.path.exists(DATA_DIR): os.makedirs(DATA_DIR)
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

# === –°–ï–†–í–ï–† –î–õ–Ø HEALTH‚ÄêCHECK (Render) ===
PORT = int(os.environ.get("PORT", 8000))
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200); self.end_headers(); self.wfile.write(b"OK")
def run_health():
    HTTPServer(("0.0.0.0", PORT), HealthHandler).serve_forever()
threading.Thread(target=run_health, daemon=True).start()

# === BOT SETUP ===
TOKEN = os.getenv("BOT_TOKEN")
bot   = telebot.TeleBot(TOKEN)

# === –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò –ò –†–ê–°–ü–ò–°–ê–ù–ò–ï ===
TEACHERS = {
    "–Æ–ª—è":      {"wd": [1,2,3,4], "hours": ["15:00","16:00","17:00","18:00","19:00","20:00"]},
    "–¢–æ—Ä–Ω–∏–∫–µ":  {"wd": [5,6,0], "hours": ["08:00","09:00","10:00","11:00","12:00",
                                        "13:00","14:00","15:00","16:00","17:00",
                                        "18:00","19:00","20:00","21:00","22:00"]},
}

# === –ê–î–ú–ò–ù–´ –ü–û ID ===
ADMINS = {388183067:"joolay_joolay", 7758773154:"joolay_vocal"}

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ===
def load_schedule():
    if os.path.exists(SCHEDULE_FILE):
        return json.load(open(SCHEDULE_FILE, 'r', encoding='utf-8'))
    return {}
def save_schedule(data):
    with open(SCHEDULE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

schedule = load_schedule()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV‚Äê–∂—É—Ä–Ω–∞–ª–∞
if not os.path.exists(RECORDS_FILE):
    with open(RECORDS_FILE, 'w', newline='', encoding='utf-8') as f:
        csv.writer(f).writerow(["Timestamp","Teacher","Date","Hour","UserID","Name","Status"])

# === –•–ï–õ–ü–ï–†–´ ===
def dates_for_teacher(teacher, week_offset):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç YYYY-MM-DD –¥–ª—è teacher –Ω–∞ —ç—Ç—É/—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."""
    now = datetime.now(TZ).date()
    # –Ω–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
    mon = now - timedelta(days=now.weekday())
    target_mon = mon + timedelta(weeks=week_offset)
    dates = []
    for d in range(7):
        dt = target_mon + timedelta(days=d)
        if dt.weekday() in TEACHERS[teacher]["wd"]:
            dates.append(dt.isoformat())
    return dates

def is_taken(teacher, date_str, hour):
    return (teacher in schedule
            and date_str in schedule[teacher]
            and hour in schedule[teacher][date_str])

def schedule_reminders(teacher, date_str, hour, uid):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å 2-—á–∞—Å–æ–≤–æ–µ –∏ –ø–æ—Å–ª–µ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    dt = datetime.fromisoformat(date_str).replace(
        tzinfo=TZ,
        hour=int(hour.split(":")[0]),
        minute=int(hour.split(":")[1]),
        second=0, microsecond=0
    )
    now = datetime.now(TZ)
    # –¥–æ 2 —á–∞—Å–æ–≤
    delta1 = (dt - timedelta(hours=2) - now).total_seconds()
    if delta1 > 0:
        Timer(delta1, lambda: bot.send_message(
            uid,
            MESSAGES["reminder_before"].format(teacher=teacher, date=date_str, hour=hour),
            parse_mode="Markdown"
        )).start()
    # —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ
    delta2 = (dt + timedelta(hours=1) + timedelta(hours=2) - now).total_seconds()
    if delta2 > 0:
        Timer(delta2, lambda: bot.send_message(
            uid,
            MESSAGES["reminder_after"].format(teacher=teacher, date=date_str, hour=hour),
            parse_mode="Markdown"
        )).start()

def cleanup_old():
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    cutoff = datetime.now(TZ).date() - timedelta(days=14)
    changed = False
    for tch in list(schedule):
        for ds in list(schedule[tch]):
            if datetime.fromisoformat(ds).date() < cutoff:
                del schedule[tch][ds]
                changed = True
        if tch in schedule and not schedule[tch]:
            del schedule[tch]
            changed = True
    if changed:
        save_schedule(schedule)
        logging.info("Cleaned old entries")
    # –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 00:05
    now = datetime.now(TZ)
    next_mid = (now + timedelta(days=1)).replace(hour=0, minute=5, second=0, microsecond=0)
    Timer((next_mid-now).total_seconds(), cleanup_old).start()

# —Å—Ç–∞—Ä—Ç –æ—á–∏—Å—Ç–∫–∏
cleanup_old()

# === MAIN MENU & HELP ===
@bot.message_handler(commands=['start'])
def cmd_start(m):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book"))
    markup.add(InlineKeyboardButton("üëÄ –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="view"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",   callback_data="cancel"))
    if m.from_user.id in ADMINS:
        markup.add(InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin"))
    bot.send_message(
        m.chat.id,
        MESSAGES["start"],
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['help'])
def cmd_help(m):
    bot.send_message(m.chat.id, MESSAGES["help"], parse_mode="Markdown")

# === CALLBACK HANDLER ===
@bot.callback_query_handler(func=lambda c: True)
def cb(c):
    data = c.data
    uid  = c.from_user.id

    # ‚Äî –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ‚Äî
    if data == "book":
        # —à–∞–≥ 1: –≤—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        kb = InlineKeyboardMarkup()
        for tch in TEACHERS:
            kb.add(InlineKeyboardButton(tch, callback_data=f"teacher_{tch}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", c.message.chat.id, c.message.message_id, reply_markup=kb)

    elif data.startswith("teacher_"):
        tch = data.split("_",1)[1]
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è",     callback_data=f"week_{tch}_0"))
        kb.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è",callback_data=f"week_{tch}_1"))
        bot.edit_message_text(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å *{tch}*. –ù–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é?", c.message.chat.id, c.message.message_id, parse_mode="Markdown", reply_markup=kb)

    elif data.startswith("week_"):
        _, tch, w = data.split("_",2)
        dates = dates_for_teacher(tch, int(w))
        kb = InlineKeyboardMarkup(row_width=3)
        for ds in dates:
            kb.add(InlineKeyboardButton(ds, callback_data=f"date_{tch}_{ds}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", c.message.chat.id, c.message.message_id, parse_mode="Markdown", reply_markup=kb)

    elif data.startswith("date_"):
        _, tch, ds = data.split("_",2)
        kb = InlineKeyboardMarkup()
        for hr in TEACHERS[tch]["hours"]:
            if not is_taken(tch, ds, hr):
                kb.add(InlineKeyboardButton(hr, callback_data=f"time_{tch}_{ds}_{hr}"))
        text = f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å *{tch}*, –¥–∞—Ç–∞ *{ds}*.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:" if kb.keyboard else "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
        bot.edit_message_text(text, c.message.chat.id, c.message.message_id, parse_mode="Markdown", reply_markup=kb)

    elif data.startswith("time_"):
        _, tch, ds, hr = data.split("_",3)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        bot.delete_message(c.message.chat.id, c.message.message_id)
        msg = bot.send_message(c.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {tch}, {ds} –≤ {hr}:")
        bot.register_next_step_handler(msg, finish_booking, tch, ds, hr, uid)

    elif data == "view":
        # –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –±—Ä–æ–Ω—å
        for tch in schedule:
            for ds in schedule[tch]:
                for hr, info in schedule[tch][ds].items():
                    if info["user_id"] == uid:
                        bot.answer_callback_query(c.id, show_alert=True, text=f"{tch} {ds} {hr} ‚Äî {info['name']} ({info['status']})")
                        return
        bot.answer_callback_query(c.id, text="–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏.")

    elif data == "cancel":
        # –æ—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        for tch in list(schedule):
            for ds in list(schedule[tch]):
                for hr, info in list(schedule[tch][ds].items()):
                    if info["user_id"] == uid:
                        del schedule[tch][ds][hr]
                        if not schedule[tch][ds]: del schedule[tch][ds]
                        save_schedule(schedule)
                        logging.info(f"User {uid} canceled {tch} {ds} {hr}")
                        bot.answer_callback_query(c.id, text="–í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                        return
        bot.answer_callback_query(c.id, text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

    # ‚Äî –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ê–î–ú–ò–ù–û–ú ‚Äî
    elif data.startswith("confirm_") and uid in ADMINS:
        _, tch, ds, hr = data.split("_",3)
        entry = schedule[tch][ds][hr]
        entry["status"] = "confirmed"
        save_schedule(schedule)
        bot.answer_callback_query(c.id, text="–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        bot.send_message(
            entry["user_id"],
            MESSAGES["booking_confirmed"].format(teacher=tch, date=ds, hour=hr),
            parse_mode="Markdown"
        )
        schedule_reminders(tch, ds, hr, entry["user_id"])
        logging.info(f"Booking confirmed: {tch} {ds} {hr} for {entry['user_id']}")
    # ‚Äî –ê–î–ú–ò–ù‚Äê–ü–ê–ù–ï–õ–¨ ‚Äî
    elif data == "admin" and uid in ADMINS:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="all"))
        kb.add(InlineKeyboardButton("üìÖ –ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", callback_data="byteacher"))
        bot.edit_message_text("–ê–¥–º–∏–Ω–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", c.message.chat.id, c.message.message_id, reply_markup=kb)

    elif data == "all" and uid in ADMINS:
        text = ""
        for tch in schedule:
            for ds in schedule[tch]:
                for hr, info in schedule[tch][ds].items():
                    text += f"{tch} {ds} {hr} ‚Äî {info['name']} ({info['status']})\n"
        bot.send_message(c.message.chat.id, text or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        bot.answer_callback_query(c.id)

    elif data == "byteacher" and uid in ADMINS:
        kb = InlineKeyboardMarkup()
        for tch in TEACHERS:
            kb.add(InlineKeyboardButton(tch, callback_data=f"adm_tch_{tch}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", c.message.chat.id, c.message.message_id, reply_markup=kb)

    elif data.startswith("adm_tch_") and uid in ADMINS:
        tch = data.split("_",2)[2]
        kb = InlineKeyboardMarkup()
        for ds in sorted(schedule.get(tch,{})):
            kb.add(InlineKeyboardButton(ds, callback_data=f"adm_day_{tch}_{ds}"))
        bot.edit_message_text(f"–ó–∞–ø–∏—Å–∏ —É {tch}:", c.message.chat.id, c.message.message_id, reply_markup=kb)

    elif data.startswith("adm_day_") and uid in ADMINS:
        _, tch, ds = data.split("_",2)
        text = ""
        kb = InlineKeyboardMarkup()
        for hr, info in schedule.get(tch,{}).get(ds,{}).items():
            text += f"{hr} ‚Äî {info['name']} ({info['status']})\n"
            kb.add(InlineKeyboardButton(f"‚ùå {hr}", callback_data=f"del_{tch}_{ds}_{hr}"))
        bot.send_message(c.message.chat.id, text or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=kb)
        bot.answer_callback_query(c.id)

    elif data.startswith("del_") and uid in ADMINS:
        _, tch, ds, hr = data.split("_",3)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"do_del_{tch}_{ds}_{hr}"))
        kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin"))
        bot.send_message(c.message.chat.id, f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {tch} {ds} {hr}?", reply_markup=kb)
        bot.answer_callback_query(c.id)

    elif data.startswith("do_del_") and uid in ADMINS:
        _, tch, ds, hr = data.split("_",3)
        del schedule[tch][ds][hr]
        if not schedule[tch][ds]: del schedule[tch][ds]
        save_schedule(schedule)
        bot.answer_callback_query(c.id, text="–£–¥–∞–ª–µ–Ω–æ.")
        logging.info(f"Admin {uid} deleted {tch} {ds} {hr}")

    else:
        bot.answer_callback_query(c.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–†–û–ù–ò ===
def finish_booking(msg, tch, ds, hr, uid):
    name = msg.text.strip()
    # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç–∞—Ç—É—Å–µ pending
    schedule.setdefault(tch,{}).setdefault(ds,{})
    schedule[tch][ds][hr] = {
        "user_id": uid,
        "name": name,
        "status": "pending"
    }
    save_schedule(schedule)
    logging.info(f"Booking pending: {tch} {ds} {hr} by {name} ({uid})")

    bot.send_message(msg.chat.id,
                     f"‚è≥ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {tch} ¬´{ds}¬ª –≤ {hr} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                     parse_mode="Markdown")

    # —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤
    note = MESSAGES["admin_new"].format(teacher=tch, date=ds, hour=hr, name=name, uid=uid)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{tch}_{ds}_{hr}"))
    for aid in ADMINS:
        bot.send_message(aid, note, parse_mode="Markdown", reply_markup=kb)

# === RUN ===
if __name__ == "__main__":
    bot.infinity_polling()
