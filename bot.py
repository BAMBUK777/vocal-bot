import os
import sqlite3
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------
TOKEN = '7985388321:AAHHqwd-zQqzTJZ8sJwb2NN3mYFZ5uDAr7g'
bot = telebot.TeleBot(TOKEN)
DB_PATH = 'vocal_lessons.db'
ADMIN_IDS = [7758773154, 388183067]
TIMEZONE = ZoneInfo('Asia/Tbilisi')

# -------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î --------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    # –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS appointments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        date TEXT,
        time TEXT
    )
    """)
    # –ú–∏–≥—Ä–∞—Ü–∏–∏: –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cursor.execute("PRAGMA table_info(appointments)")
    existing = [row[1] for row in cursor.fetchall()]
    migrations = {
        'fullname': "TEXT",
        'phone': "TEXT",
        'teacher': "TEXT",
        'status': "TEXT",
        'reminder_sent': "INTEGER DEFAULT 0"
    }
    for col, definition in migrations.items():
        if col not in existing:
            cursor.execute(f"ALTER TABLE appointments ADD COLUMN {col} {definition}")
    conn.commit()
    conn.close()

init_db()

# --------- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---------
user_data = {}  # { user_id: {'teacher':..., 'fullname':..., 'phone':..., 'date':..., 'time':...} }

# --------- –£—Ç–∏–ª–∏—Ç–∞: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---------
def show_main_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫', '–ú–æ—è –∑–∞–ø–∏—Å—å', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', '‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# --------- /start ---------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    show_main_menu(message.chat.id)

# --------- ¬´–ù–∞–∑–∞–¥¬ª (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞) ---------
@bot.message_handler(func=lambda m: m.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥')
def handle_back_text(message):
    show_main_menu(message.chat.id)

# --------- –ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫ ---------
@bot.message_handler(func=lambda m: m.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫')
def choose_teacher(message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('–Æ–ª—è', callback_data='select_teacher:–Æ–ª—è'),
        types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'back')
def callback_back(call):
    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    show_main_menu(call.message.chat.id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_teacher:'))
def process_teacher(call):
    teacher = call.data.split(':',1)[1]
    user_data[call.from_user.id] = {'teacher': teacher}
    # –û—á–∏—Å—Ç–∏–º inline-–∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    # –ó–∞–ø—Ä–æ—Å–∏–º –§–ò–û —á–µ—Ä–µ–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û:", reply_markup=kb)
    bot.answer_callback_query(call.id)
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return handle_back_text(message)
    uid = message.from_user.id
    user_data[uid]['fullname'] = message.text.strip()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    msg = bot.send_message(
        message.chat.id,
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç TG –∏–ª–∏ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è.",
        reply_markup=kb
    )
    bot.register_next_step_handler(msg, process_phone_step)

def process_phone_step(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return handle_back_text(message)
    uid = message.from_user.id
    user_data[uid]['phone'] = message.text.strip()
    send_date_selection(message)

def send_date_selection(message):
    today = datetime.now(TIMEZONE).date()
    kb = types.InlineKeyboardMarkup(row_width=4)
    for d in range(14):
        day = today + timedelta(days=d)
        # –í—Ç–æ—Ä–Ω–∏–∫=1 ... –ü—è—Ç–Ω–∏—Ü–∞=4
        if 1 <= day.weekday() <= 4:
            kb.add(types.InlineKeyboardButton(
                day.strftime('%d/%m'),
                callback_data=f"select_date:{day.isoformat()}"
            ))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (—Å–ª–µ–¥—É—é—â–∏–µ 2 –Ω–µ–¥–µ–ª–∏, –≤—Ç–æ—Ä–Ω–∏–∫‚Äì–ø—è—Ç–Ω–∏—Ü–∞):",
        reply_markup=kb
    )

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_date:'))
def process_date_selection(call):
    if call.data == 'back':
        return callback_back(call)
    date_iso = call.data.split(':',1)[1]
    user_data[call.from_user.id]['date'] = date_iso
    # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ inline
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    # –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    kb = types.InlineKeyboardMarkup(row_width=4)
    for hour in range(14, 23):
        slot = f"{hour:02d}:00"
        kb.add(types.InlineKeyboardButton(slot, callback_data=f"select_time:{slot}"))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞:", reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_time:'))
def process_time_selection(call):
    if call.data == 'back':
        return callback_back(call)
    time_slot = call.data.split(':',1)[1]
    user_data[call.from_user.id]['time'] = time_slot
    finalize_appointment(call.message)

def finalize_appointment(message):
    uid = message.chat.id
    data = user_data.get(uid, {})
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO appointments
      (user_id, fullname, phone, teacher, date, time, status, reminder_sent)
    VALUES (?, ?, ?, ?, ?, ?, 'pending', 0)
    """, (
        uid,
        data.get('fullname',''),
        data.get('phone',''),
        data.get('teacher',''),
        data.get('date',''),
        data.get('time','')
    ))
    appt_id = cursor.lastrowid
    conn.commit()
    conn.close()

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–∂–∏–¥–∞–Ω–∏—è
    bot.send_message(uid,
                     "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                     "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                     reply_markup=types.ReplyKeyboardRemove())

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appt_id}\n"
        f"–£—á–µ–Ω–∏–∫: {data.get('fullname')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {data.get('teacher')}\n"
        f"–î–∞—Ç–∞: {data.get('date')} –≤ {data.get('time')}"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"admin_approve:{appt_id}"),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"admin_reject:{appt_id}")
    )
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, text, reply_markup=kb)

# --------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ---------
@bot.callback_query_handler(func=lambda c: c.data.startswith('admin_'))
def process_admin_decision(call):
    action, appt_id = call.data.split(':',1)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, date, time FROM appointments WHERE id = ?", (appt_id,))
    row = cursor.fetchone()
    if not row:
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        conn.close()
        return
    user_id, date_iso, time_slot = row
    if action == 'admin_approve':
        cursor.execute("UPDATE appointments SET status='approved' WHERE id = ?", (appt_id,))
        conn.commit()
        bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date_iso} –≤ {time_slot} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∞.")
    else:
        cursor.execute("DELETE FROM appointments WHERE id = ?", (appt_id,))
        conn.commit()
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à—É –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–∏–ª–∏.")
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    conn.close()

# --------- ¬´–ú–æ—è –∑–∞–ø–∏—Å—å¬ª –∏ –æ—Ç–º–µ–Ω–∞ ---------
@bot.message_handler(func=lambda m: m.text == '–ú–æ—è –∑–∞–ø–∏—Å—å')
def my_appointments(message):
    uid = message.chat.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    today_iso = datetime.now(TIMEZONE).date().isoformat()
    cursor.execute("""
        SELECT id, teacher, date, time
          FROM appointments
         WHERE user_id = ? AND status = 'approved' AND date >= ?
         ORDER BY date, time
    """, (uid, today_iso))
    rows = cursor.fetchall()
    conn.close()
    if not rows:
        bot.send_message(uid, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    for appt_id, teacher, date_iso, time_slot in rows:
        text = f"#{appt_id} –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n–î–∞—Ç–∞: {date_iso} –≤ {time_slot}"
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data=f"cancel_request:{appt_id}"),
               types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
        bot.send_message(uid, text, reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith('cancel_request:'))
def process_cancel_request(call):
    if call.data == 'back':
        return callback_back(call)
    appt_id = call.data.split(':',1)[1]
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data=f"cancel_confirm:{appt_id}"),
        types.InlineKeyboardButton('–ù–µ—Ç',          callback_data='cancel_deny')
    )
    bot.send_message(call.message.chat.id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?", reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('cancel_'))
def process_cancel_confirm(call):
    data = call.data
    if data == 'cancel_deny':
        bot.send_message(call.message.chat.id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.answer_callback_query(call.id)
        return
    appt_id = data.split(':',1)[1]
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT fullname, date, time FROM appointments WHERE id = ?", (appt_id,))
    row = cursor.fetchone()
    conn.close()
    if not row:
        bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    fullname, date_iso, time_slot = row
    text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fullname} –ø—Ä–æ—Å–∏—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å #{appt_id}\n"
        f"–î–∞—Ç–∞: {date_iso} –≤ {time_slot}"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É', callback_data=f"admin_cancel_confirm:{appt_id}"),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å',   callback_data=f"admin_cancel_reject:{appt_id}")
    )
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, text, reply_markup=kb)
    bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('admin_cancel_'))
def process_admin_cancel(call):
    action, appt_id = call.data.split(':',1)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM appointments WHERE id = ?", (appt_id,))
    row = cursor.fetchone()
    if not row:
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        conn.close()
        return
    user_id = row[0]
    if action == 'admin_cancel_confirm':
        cursor.execute("DELETE FROM appointments WHERE id = ?", (appt_id,))
        conn.commit()
        bot.send_message(user_id, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    else:
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    conn.close()

# --------- –ö–æ–Ω—Ç–∞–∫—Ç—ã ---------
@bot.message_handler(func=lambda m: m.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
def send_contacts(message):
    show_main_menu(message.chat.id)  # –æ—á–∏—Å—Ç–∫–∞ –º–µ–Ω—é
    bot.send_message(
        message.chat.id,
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "@joolay_joolay (–Æ–ª—è)\n"
        "@joolay_vocal (–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É)"
    )

# --------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π ---------
def send_reminders():
    now = datetime.now(TIMEZONE)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, fullname, teacher, date, time
          FROM appointments
         WHERE status='approved' AND reminder_sent=0
    """)
    for appt_id, fullname, teacher, date_iso, time_slot in cursor.fetchall():
        dt = datetime.strptime(f"{date_iso} {time_slot}", "%Y-%m-%d %H:%M")\
                    .replace(tzinfo=TIMEZONE)
        if 0 <= (dt - now).total_seconds() <= 3600:
            text = (
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É—Ä–æ–∫ #{appt_id}\n"
                f"–£—á–µ–Ω–∏–∫: {fullname}\n"
                f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
                f"–í—Ä–µ–º—è: {date_iso} {time_slot}"
            )
            for admin_id in ADMIN_IDS:
                bot.send_message(admin_id, text)
            cursor.execute("UPDATE appointments SET reminder_sent=1 WHERE id = ?", (appt_id,))
    conn.commit()
    conn.close()

def clean_past_appointments():
    now_str = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        DELETE FROM appointments
         WHERE status='approved'
           AND datetime(date || ' ' || time) < ?
    """, (now_str,))
    conn.commit()
    conn.close()

scheduler = BackgroundScheduler(timezone=TIMEZONE)
scheduler.add_job(send_reminders, 'interval', minutes=1)
scheduler.add_job(clean_past_appointments, 'cron', hour=0, minute=0)
scheduler.start()

# --------- –ó–∞–ø—É—Å–∫ ---------
if __name__ == '__main__':
    bot.infinity_polling()
