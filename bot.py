from dotenv import load_dotenv
load_dotenv()

import os
import logging
import time
import psycopg2
from psycopg2.extras import DictCursor
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from flask import Flask
from threading import Thread

import telebot
from telebot import types

# ------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï -------------------
logging.basicConfig(level=logging.INFO)
telebot.logger.setLevel(logging.DEBUG)

# ------------------- HTTP SERVER –¥–ª—è UptimeRobot -------------------
app = Flask(__name__)

@app.route("/")
def ping():
    return "OK", 200

def run_web():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

Thread(target=run_web, daemon=True).start()

# ------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï -------------------
TOKEN = os.getenv("TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
DB_URL = os.getenv("DB_URL")
TIMEZONE = ZoneInfo(os.getenv("TIMEZONE", "Asia/Tbilisi"))

if not TOKEN or not ADMIN_IDS or not DB_URL:
    raise RuntimeError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ .env: TOKEN, ADMIN_IDS –∏ DB_URL")

bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()

# ------------------- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï -------------------
def get_conn():
    return psycopg2.connect(DB_URL, cursor_factory=DictCursor)

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    # appointments
    cur.execute("""
        CREATE TABLE IF NOT EXISTS appointments (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            fullname TEXT,
            phone TEXT,
            teacher TEXT,
            date DATE,
            time TEXT,
            status TEXT DEFAULT 'pending', -- pending, approved, cancel_requested, cancelled
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        )
    """)
    # users
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            fullname TEXT,
            last_success DATETIME
        )
    """)
    # materials
    cur.execute("""
        CREATE TABLE IF NOT EXISTS materials (
            id SERIAL PRIMARY KEY,
            title TEXT,
            url TEXT,
            category TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# ------------------- –ú–ê–¢–ï–†–ò–ê–õ–´ (–ü–†–ò–ú–ï–†) -------------------
def preload_materials():
    conn = get_conn()
    cur = conn.cursor()
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    cur.execute("SELECT count(*) FROM materials")
    if cur.fetchone()[0] == 0:
        materials = [
            ("–í–∏–¥–µ–æ —É—Ä–æ–∫: –∫–∞–∫ –Ω–µ –±–æ—è—Ç—å—Å—è –ø–µ—Ç—å", "https://youtu.be/PjETXaGWPOY?si=MyFStY9e_27UMJZ1", "video"),
            ("–í–∏–¥–µ–æ: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–æ–ª–æ—Å–∞", "https://youtu.be/yOOBTaE_pbI?si=vfcPekxvTQlO7tuv", "video"),
            ("–ü–ª–µ–π–ª–∏—Å—Ç —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏", "https://youtube.com/playlist?list=PLyYODOfmFKhfv9p2S33RpELWIMCh45Pz4&si=JZyyuFTaFaYqHT89", "video"),
            ("–°—Ç–∞—Ç—å—è: –ø–æ—á–µ–º—É –º—ã –±–æ–∏–º—Å—è —Å—Ü–µ–Ω—ã", "https://dzen.ru/a/ZOTlwIPR0RvVlv5u", "article"),
            ("–ö–Ω–∏–≥–∞: –ü–æ–π—Ç–µ –∫–∞–∫ –∑–≤—ë–∑–¥—ã", "https://royallib.com/book/riggs_set/poyte_kak_zvyozdi.html", "book")
        ]
        for t, u, c in materials:
            cur.execute("INSERT INTO materials (title, url, category) VALUES (%s, %s, %s)", (t, u, c))
    conn.commit()
    conn.close()

preload_materials()

# ------------------- –•–†–ê–ù–ò–õ–ò–©–ï –í–†–ï–ú–ï–ù–ù–´–• –î–ê–ù–ù–´–• -------------------
user_data = {}

# ------------------- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ -------------------
def show_main_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫', '–ú–æ—è –∑–∞–ø–∏—Å—å')
    kb.add('üåà –î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    kb.add('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@bot.message_handler(commands=['start'])
def cmd_start(msg):
    show_main_menu(msg.chat.id)

@bot.message_handler(func=lambda m: m.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def main_menu(msg):
    show_main_menu(msg.chat.id)

# ------------------- –ö–û–ù–¢–ê–ö–¢–´ -------------------
@bot.message_handler(func=lambda m: m.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
def show_contacts(msg):
    text = (
        "üë©‚Äçüè´ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:</b>\n"
        "‚Ä¢ –Æ–ª—è\n"
        "‚Ä¢ –¢–æ—Ä–Ω–∏–∫–µ\n\n"
        "üè¢ <b>–ê–¥—Ä–µ—Å:</b>\n"
        "Joolay Vocal Studio\n"
        "2/7, Zaarbriuken Square, Tbilisi\n"
        "üìç <a href=\"https://maps.app.goo.gl/XtXSVWX2exaRmHpp9\">–ù–∞ –∫–∞—Ä—Ç–µ</a>"
    )
    bot.send_message(msg.chat.id, text, parse_mode='HTML', disable_web_page_preview=True)
    show_main_menu(msg.chat.id)

# ------------------- –ó–ê–ü–ò–°–¨ –ù–ê –£–†–û–ö -------------------
@bot.message_handler(func=lambda m: m.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫')
def choose_teacher(msg):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton('–Æ–ª—è', callback_data='teacher:–Æ–ª—è'))
    kb.add(types.InlineKeyboardButton('–¢–æ—Ä–Ω–∏–∫–µ', callback_data='teacher:–¢–æ—Ä–Ω–∏–∫–µ'))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_menu'))
    bot.send_message(msg.chat.id, "üë©‚Äçüè´ –ö –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'back_menu')
def back_menu(c):
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    show_main_menu(c.message.chat.id)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('teacher:'))
def cb_teacher(c):
    teacher = c.data.split(':', 1)[1]
    uid = c.from_user.id
    user_data[uid] = {'teacher': teacher}
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    m = bot.send_message(c.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=kb)
    bot.register_next_step_handler(m, process_name)

def process_name(msg):
    if msg.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return show_main_menu(msg.chat.id)
    uid = msg.from_user.id
    user_data[uid]['fullname'] = msg.text.strip()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    m = bot.send_message(msg.chat.id, "üì± –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–¥.):", reply_markup=kb)
    bot.register_next_step_handler(m, process_phone)

def process_phone(msg):
    if msg.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return show_main_menu(msg.chat.id)
    uid = msg.from_user.id
    user_data[uid]['phone'] = msg.text.strip()
    send_date_selection(msg)

def send_date_selection(msg):
    uid = msg.from_user.id
    teacher = user_data[uid]['teacher']
    today = datetime.now(TIMEZONE).date()
    kb = types.InlineKeyboardMarkup(row_width=4)
    if teacher == "–¢–æ—Ä–Ω–∏–∫–µ":
        days = [0, 4, 5, 6]  # –ø–Ω, –ø—Ç, —Å–±, –≤—Å
        work_hours = range(8, 24)
    else:
        days = [1, 2, 3, 4]  # –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç
        work_hours = range(15, 21)
    for d in range(14):
        day = today + timedelta(days=d)
        if day.weekday() in days:
            kb.add(types.InlineKeyboardButton(
                day.strftime('%d/%m'), callback_data=f"date:{day.isoformat()}"
            ))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_menu'))
    bot.send_message(msg.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith('date:'))
def cb_date(c):
    uid = c.from_user.id
    teacher = user_data[uid]['teacher']
    date_iso = c.data.split(':', 1)[1]
    user_data[uid]['date'] = date_iso
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    kb = types.InlineKeyboardMarkup(row_width=4)
    if teacher == "–¢–æ—Ä–Ω–∏–∫–µ":
        for hour in range(8, 24):
            slot = f"{hour:02d}:00"
            kb.add(types.InlineKeyboardButton(slot, callback_data=f"time:{slot}"))
    else:
        for hour in range(15, 21):
            slot = f"{hour:02d}:00"
            kb.add(types.InlineKeyboardButton(slot, callback_data=f"time:{slot}"))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_menu'))
    bot.send_message(c.message.chat.id, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('time:'))
def cb_time(c):
    uid = c.from_user.id
    slot = c.data.split(':', 1)[1]
    user_data[uid]['time'] = slot
    finalize_appointment(c.message)

def finalize_appointment(msg):
    uid = msg.chat.id
    d = user_data.get(uid, {})
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO appointments (user_id, fullname, phone, teacher, date, time)
        VALUES (%s, %s, %s, %s, %s, %s)
        RETURNING id
    """, (uid, d['fullname'], d['phone'], d['teacher'], d['date'], d['time']))
    appt_id = cur.fetchone()[0]
    conn.commit()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    cur.execute("""
        INSERT INTO users (user_id, fullname) VALUES (%s, %s)
        ON CONFLICT (user_id) DO NOTHING
    """, (uid, d['fullname']))
    conn.commit()
    conn.close()

    bot.send_message(uid, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    text = (
        f"üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appt_id}\n"
        f"üë§ {d['fullname']}\n"
        f"üì± {d['phone']}\n"
        f"üßë‚Äçüè´ {d['teacher']}\n"
        f"üìÖ {d['date']} {d['time']}"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"admin_approve:{appt_id}"),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"admin_reject:{appt_id}")
    )
    for aid in ADMIN_IDS:
        bot.send_message(aid, text, reply_markup=kb)
    show_main_menu(uid)

# ------------------- –ú–û–Ø –ó–ê–ü–ò–°–¨ / –û–¢–ú–ï–ù–ê -------------------
@bot.message_handler(func=lambda m: m.text == '–ú–æ—è –∑–∞–ø–∏—Å—å')
def my_appointment(msg):
    uid = msg.from_user.id
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        SELECT id, teacher, date, time, status FROM appointments
        WHERE user_id=%s AND status IN ('pending','approved') ORDER BY created_at DESC LIMIT 1
    """, (uid,))
    row = cur.fetchone()
    conn.close()
    if not row:
        bot.send_message(msg.chat.id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        show_main_menu(msg.chat.id)
        return
    appt_id, teacher, date, time_slot, status = row
    status_str = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if status == "pending" else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
    kb = types.InlineKeyboardMarkup()
    if status == "approved":
        kb.add(types.InlineKeyboardButton('üö´ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–º–µ–Ω—É', callback_data=f"cancel_request:{appt_id}"))
    bot.send_message(msg.chat.id, f"üóì –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n\nüßë‚Äçüè´ {teacher}\nüìÖ {date} {time_slot}\n–°—Ç–∞—Ç—É—Å: {status_str}", reply_markup=kb)
    show_main_menu(msg.chat.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('cancel_request:'))
def cancel_request(c):
    appt_id = c.data.split(':',1)[1]
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data=f"confirm_cancel:{appt_id}"))
    kb.add(types.InlineKeyboardButton('–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', callback_data="back_menu"))
    bot.send_message(c.from_user.id, "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?", reply_markup=kb)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('confirm_cancel:'))
def confirm_cancel(c):
    appt_id = c.data.split(':',1)[1]
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("UPDATE appointments SET status='cancel_requested', updated_at=NOW() WHERE id=%s", (appt_id,))
    conn.commit()
    conn.close()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É', callback_data=f"admin_cancel_ok:{appt_id}"),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"admin_cancel_no:{appt_id}")
    )
    for aid in ADMIN_IDS:
        bot.send_message(aid, f"‚ùóÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ #{appt_id}", reply_markup=kb)
    bot.send_message(c.from_user.id, "‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    show_main_menu(c.from_user.id)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('admin_cancel_ok:') or c.data.startswith('admin_cancel_no:'))
def process_cancel_admin(c):
    appt_id = c.data.split(':',1)[1]
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM appointments WHERE id=%s", (appt_id,))
    row = cur.fetchone()
    if not row:
        bot.answer_callback_query(c.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        conn.close()
        return
    user_id = row['user_id']
    if c.data.startswith('admin_cancel_ok:'):
        cur.execute("UPDATE appointments SET status='cancelled', updated_at=NOW() WHERE id=%s", (appt_id,))
        conn.commit()
        bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        bot.answer_callback_query
