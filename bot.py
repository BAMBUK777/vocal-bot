from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ .env

import os
import sqlite3
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from flask import Flask
from threading import Thread

import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

# ---------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------------
logging.basicConfig(level=logging.INFO)
telebot.logger.setLevel(logging.DEBUG)

# --- –ú–∏–Ω–∏-–≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks (Render Web Service) ---
app = Flask(__name__)

@app.route("/")
def ping():
    return "OK", 200

def run_web():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

Thread(target=run_web, daemon=True).start()

# ---------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ----------------
TOKEN     = os.getenv("TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
DB_PATH   = os.getenv("DB_PATH", "vocal_lessons.db")
TIMEZONE  = ZoneInfo(os.getenv("TIMEZONE", "Asia/Tbilisi"))

if not TOKEN or not ADMIN_IDS:
    raise RuntimeError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ .env: TOKEN –∏ ADMIN_IDS")

# ---------------- TELEBOT SETUP ----------------
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ webhooks, –µ—Å–ª–∏ –±—ã–ª–∏

# ---------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ ----------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS appointments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        fullname TEXT,
        phone TEXT,
        teacher TEXT,
        date TEXT,
        time TEXT,
        status TEXT DEFAULT 'pending',
        reminder_sent INTEGER DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

init_db()

# ---------------- –•–†–ê–ù–ò–õ–ò–©–ï –î–õ–Ø –î–ò–ê–õ–û–ì–ê ----------------
user_data = {}

# ---------------- –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ ----------------
def show_main_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫', '–ú–æ—è –∑–∞–ø–∏—Å—å', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', '‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# ---------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ----------------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥')
def handle_back(message):
    show_main_menu(message.chat.id)

# –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫
@bot.message_handler(func=lambda m: m.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫')
def choose_teacher(message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('–Æ–ª—è', callback_data='select_teacher:–Æ–ª—è'),
        types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'back')
def cb_back(call):
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    show_main_menu(call.message.chat.id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_teacher:'))
def cb_select_teacher(call):
    teacher = call.data.split(':',1)[1]
    uid = call.from_user.id
    user_data[uid] = {'teacher': teacher}
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=kb)
    bot.answer_callback_query(call.id)
    bot.register_next_step_handler(msg, process_name)

def process_name(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return handle_back(message)
    uid = message.from_user.id
    user_data[uid]['fullname'] = message.text.strip()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    msg = bot.send_message(
        message.chat.id,
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç TG –∏–ª–∏ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:",
        reply_markup=kb
    )
    bot.register_next_step_handler(msg, process_phone)

def process_phone(message):
    if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return handle_back(message)
    uid = message.from_user.id
    user_data[uid]['phone'] = message.text.strip()
    send_date_selection(message)

def send_date_selection(message):
    today = datetime.now(TIMEZONE).date()
    kb = types.InlineKeyboardMarkup(row_width=4)
    for d in range(14):
        day = today + timedelta(days=d)
        if 1 <= day.weekday() <= 4:  # –≤—Ç‚Äì–ø—Ç
            kb.add(
                types.InlineKeyboardButton(
                    day.strftime('%d/%m'),
                    callback_data=f"select_date:{day.isoformat()}"
                )
            )
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_date:'))
def cb_select_date(call):
    if call.data == 'back':
        return cb_back(call)
    date_iso = call.data.split(':',1)[1]
    uid = call.from_user.id
    user_data[uid]['date'] = date_iso
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    kb = types.InlineKeyboardMarkup(row_width=4)
    for hour in range(14, 23):
        slot = f"{hour:02d}:00"
        kb.add(types.InlineKeyboardButton(slot, callback_data=f"select_time:{slot}"))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_time:'))
def cb_select_time(call):
    if call.data == 'back':
        return cb_back(call)
    time_slot = call.data.split(':',1)[1]
    uid = call.from_user.id
    user_data[uid]['time'] = time_slot
    finalize_appointment(call.message)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def finalize_appointment(message):
    uid = message.chat.id
    data = user_data.get(uid, {})
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO appointments
      (user_id, fullname, phone, teacher, date, time)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (
        uid,
        data.get('fullname',''),
        data.get('phone',''),
        data.get('teacher',''),
        data.get('date',''),
        data.get('time','')
    ))
    appt_id = cursor.lastrowid
    conn.commit()
    conn.close()

    bot.send_message(
        uid,
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appt_id}\n"
        f"–£—á–µ–Ω–∏–∫: {data.get('fullname')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('phone')}\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {data.get('teacher')}\n"
        f"–î–∞—Ç–∞: {data.get('date')} –≤ {data.get('time')}"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"admin_approve:{appt_id}"),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"admin_reject:{appt_id}")
    )
    for aid in ADMIN_IDS:
        bot.send_message(aid, text, reply_markup=kb)

# –ê–¥–º–∏–Ω-—Ä–µ—à–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ handlers‚Ä¶
# (–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ ‚Äî
#  approve/reject, my appointments, cancel flow, reminders, cleanup)

# ------- –ü–†–ê–í–ò–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö -------
if __name__ == '__main__':
    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(send_reminders, 'interval', minutes=1)
    scheduler.add_job(clean_past_appointments, 'cron', hour=0, minute=0)
    scheduler.start()
    bot.infinity_polling(timeout=60, long_polling_timeout=60, skip_pending=True)

