
import os
import json
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime, timedelta, date
from zoneinfo import ZoneInfo

import telebot
from telebot import types

TZ = ZoneInfo("Asia/Tbilisi")
PORT = int(os.getenv("PORT", 9999))
DATA_DIR = "data"
LANG_FILE = os.path.join(DATA_DIR, "lang.json")
SCHEDULE_FILE = os.path.join(DATA_DIR, "schedule.json")
DEFAULT_LANG = "ru"

ADMINS = {
    7758773154: "joolay_vocal",
    388183067:  "joolay_joolay"
}

TEACHERS = {
    "–Æ–ª—è":     {"wd": [1, 2, 3, 4], "hours": [f"{h}:00" for h in range(15, 21)]},
    "–¢–æ—Ä–Ω–∏–∫–µ": {"wd": [5, 6, 0],    "hours": [f"{h}:00" for h in range(8, 23)]}
}

WD_SHORT = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]
LANGUAGES = {"ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "en": "English üá¨üáß"}

MESSAGES = {
    "ru": {
        "choose_lang": "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "lang_set": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}",
        "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "btn_book": "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        "btn_my": "üëÅ –ú–æ—è –∑–∞–ø–∏—Å—å",
        "btn_cancel": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
        "btn_admin": "üõ† –ê–¥–º–∏–Ω–∫–∞",
        "choose_teacher": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        "choose_week": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
        "choose_day": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        "choose_time": "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        "enter_name": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "pending": "‚è≥ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "confirmed": "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {t} {d} {h}",
        "cancel_q": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?",
        "cancel_ok": "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        "no_booking": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
        "admin_notify": "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {t} {d} {h}\nüë§ {n} (ID {u})"
    },
    "en": {
        "choose_lang": "üëã Welcome! Choose your language:",
        "lang_set": "Language set to: {lang}",
        "main_menu": "Main menu:",
        "btn_book": "üìÖ Book",
        "btn_my": "üëÅ My booking",
        "btn_cancel": "‚ùå Cancel booking",
        "btn_admin": "üõ† Admin panel",
        "choose_teacher": "Choose a teacher:",
        "choose_week": "Choose week:",
        "choose_day": "Choose a day:",
        "choose_time": "Choose a time:",
        "enter_name": "Enter your name:",
        "pending": "‚è≥ Booking created. Await confirmation.",
        "confirmed": "‚úÖ Booking confirmed: {t} {d} {h}",
        "cancel_q": "Are you sure you want to cancel your booking?",
        "cancel_ok": "‚úÖ Booking cancelled.",
        "no_booking": "You have no active bookings.",
        "admin_notify": "üÜï New booking: {t} {d} {h}\nüë§ {n} (ID {u})"
    }
}

os.makedirs(DATA_DIR, exist_ok=True)
if not os.path.exists(LANG_FILE): json.dump({}, open(LANG_FILE, "w", encoding="utf-8"))
if not os.path.exists(SCHEDULE_FILE): json.dump({}, open(SCHEDULE_FILE, "w", encoding="utf-8"))

def load_json(path): return json.load(open(path, "r", encoding="utf-8"))
def save_json(path, data): json.dump(data, open(path, "w", encoding="utf-8"), ensure_ascii=False, indent=2)
def get_lang(uid): return load_json(LANG_FILE).get(str(uid), DEFAULT_LANG)
def txt(uid, key, **kwargs): return MESSAGES[get_lang(uid)][key].format(**kwargs)

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

class HC(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

threading.Thread(target=lambda: HTTPServer(("0.0.0.0", PORT), HC).serve_forever(), daemon=True).start()

# –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
def start_reminder_loop():
    def check_loop():
        while True:
            now = datetime.now(TZ)
            sch = load_json(SCHEDULE_FILE)
            changed = False

            for teacher, days in sch.items():
                for d, times in days.items():
                    for h, info in times.items():
                        if info["status"] == "confirmed":
                            lesson_time = datetime.fromisoformat(f"{d}T{h}").replace(tzinfo=TZ)
                            delta = (lesson_time - now).total_seconds()
                            if 0 < delta <= 7200:
                                try:
                                    bot.send_message(
                                        info["uid"],
                                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–Ω—è—Ç–∏–µ —Å {teacher} –≤ {h}",
                                        reply_markup=None
                                    )
                                    info["status"] = "reminded"
                                    changed = True
                                except:
                                    pass

            if changed:
                save_json(SCHEDULE_FILE, sch)

            threading.Event().wait(3600)

    threading.Thread(target=check_loop, daemon=True).start()

# –ó–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–∏
start_reminder_loop()
bot.infinity_polling(timeout=60, long_polling_timeout=60, skip_pending=True)
