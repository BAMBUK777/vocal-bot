import os
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# ‚Äî‚Äî‚Äî‚Äî‚Äî health check server ‚Äî‚Äî‚Äî‚Äî‚Äî
PORT = int(os.environ.get("PORT", 8000))
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")
def run_health_server():
    HTTPServer(("0.0.0.0", PORT), HealthHandler).serve_forever()
threading.Thread(target=run_health_server, daemon=True).start()
# ‚Äî‚Äî‚Äî‚Äî‚Äî –∫–æ–Ω–µ—Ü health check ‚Äî‚Äî‚Äî‚Äî‚Äî

TOKEN = os.getenv("BOT_TOKEN")
# ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Ä¶




# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")
DATA_FOLDER = 'data'
SCHEDULE_FILE = os.path.join(DATA_FOLDER, 'schedule.json')
DAYS = ['–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
HOURS = ['15:00', '16:00', '17:00', '18:00', '19:00', '20:00']

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (—á—É–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–≥–Ω–æ—Ä–∏–º)
ADMINS = {
    388183067: 'joolay_joolay',
    7758773154: 'joolay_vocal'
}

bot = telebot.TeleBot(TOKEN)

# === –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï ===
if not os.path.exists(DATA_FOLDER):
    os.makedirs(DATA_FOLDER)

def load_schedule():
    if os.path.exists(SCHEDULE_FILE):
        with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_schedule(schedule):
    with open(SCHEDULE_FILE, 'w', encoding='utf-8') as f:
        json.dump(schedule, f, ensure_ascii=False, indent=4)

schedule_data = load_schedule()

# === –•–≠–õ–ü–ï–†–´ ===
def get_user_record(user_id):
    for day in schedule_data:
        for hour in schedule_data[day]:
            if schedule_data[day][hour]['user_id'] == user_id:
                return day, hour
    return None, None

def is_slot_taken(day, hour):
    return day in schedule_data and hour in schedule_data[day]

def book_slot(day, hour, user_id, name):
    if day not in schedule_data:
        schedule_data[day] = {}
    schedule_data[day][hour] = {'user_id': user_id, 'name': name}
    save_schedule(schedule_data)

def cancel_booking(user_id):
    for day in list(schedule_data.keys()):
        for hour in list(schedule_data[day].keys()):
            if schedule_data[day][hour]['user_id'] == user_id:
                del schedule_data[day][hour]
                if not schedule_data[day]:
                    del schedule_data[day]
                save_schedule(schedule_data)
                return True
    return False

def format_schedule(day=None):
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    data = schedule_data if day is None else {day: schedule_data.get(day, {})}
    lines = []
    for d in DAYS:
        if d not in data:
            lines.append(f"üîπ *{d}* ‚Äî –ø—É—Å—Ç–æ")
            continue
        lines.append(f"üîπ *{d}*")
        for h in HOURS:
            if h in data[d]:
                name = data[d][h]['name']
                lines.append(f"   ‚Ä¢ {h} ‚Äî {name}")
            else:
                lines.append(f"   ‚Ä¢ {h} ‚Äî _—Å–≤–æ–±–æ–¥–Ω–æ_")
    return "\n".join(lines)

# === –û–ë–©–ï–ï –ú–ï–ù–Æ ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book"))
    markup.add(InlineKeyboardButton("üëÄ –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="view"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel"))
    if message.from_user.id in ADMINS:
        markup.add(InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤–æ–∫–∞–ª –∫ –Æ–ª–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, parse_mode='Markdown')

# === –ö–ù–û–ü–ö–ò –ò –ó–ê–ü–ò–°–¨ ===
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    data = call.data
    uid  = call.from_user.id

    # –°—Ä–∞–∑—É –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ
    logging.info(f"Callback received: '{data}' from user {uid}")

    # === –æ—Å–Ω–æ–≤–Ω–æ–π —Å–≤–∏—Ç—á –ø–æ data ===

    # 1) –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if data == "book":
        kb = InlineKeyboardMarkup()
        for tch in TEACHERS:
            kb.add(InlineKeyboardButton(tch, callback_data=f"teacher_{tch}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", call.message.chat.id, call.message.message_id, reply_markup=kb)
        return

    # 2) –í—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
    if data.startswith("teacher_"):
        tch = data.split("_",1)[1]
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è",      callback_data=f"week_{tch}_0"))
        kb.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=f"week_{tch}_1"))
        bot.edit_message_text(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å *{tch}*. –ù–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é?", call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=kb)
        return

    # 3) –í—ã–±–æ—Ä –¥–∞—Ç—ã
    if data.startswith("week_"):
        _, tch, w = data.split("_",2)
        dates = dates_for_teacher(tch, int(w))
        kb = InlineKeyboardMarkup(row_width=3)
        for ds in dates:
            kb.add(InlineKeyboardButton(ds, callback_data=f"date_{tch}_{ds}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", call.message.chat.id, call.message.message_id, reply_markup=kb)
        return

    # 4) –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    if data.startswith("date_"):
        _, tch, ds = data.split("_",2)
        kb = InlineKeyboardMarkup()
        for hr in TEACHERS[tch]["hours"]:
            if not is_taken(tch, ds, hr):
                kb.add(InlineKeyboardButton(hr, callback_data=f"time_{tch}_{ds}_{hr}"))
        text = f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å *{tch}*, –¥–∞—Ç–∞ *{ds}*.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:" if kb.keyboard else "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=kb)
        return

    # 5) –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏
    if data.startswith("time_"):
        _, tch, ds, hr = data.split("_",3)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {tch}, {ds} –≤ {hr}:")
        bot.register_next_step_handler(msg, finish_booking, tch, ds, hr, uid)
        return

    # 6) –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –±—Ä–æ–Ω–∏
    if data == "view":
        tch, ds, hr = get_user_record(uid)
        if tch:
            info = schedule[tch][ds][hr]
            bot.answer_callback_query(call.id, show_alert=True, text=f"{tch} {ds} {hr} ‚Äî {info['name']} ({info['status']})")
        else:
            bot.answer_callback_query(call.id, text="–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏.")
        return

    # 7) –û—Ç–º–µ–Ω–∞ —Å–≤–æ–µ–π –±—Ä–æ–Ω–∏
    if data == "cancel":
        if cancel_user(uid):
            bot.answer_callback_query(call.id, text="–í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logging.info(f"User {uid} cancelled their booking")
        else:
            bot.answer_callback_query(call.id, text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return

    # 8) –ê–¥–º–∏–Ω–∫–∞ ‚Äî –≤—Ö–æ–¥
    if data == "admin" and uid in ADMINS:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏",           callback_data="all"))
        kb.add(InlineKeyboardButton("üìÖ –ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é",    callback_data="by_teacher"))
        bot.edit_message_text("–ê–¥–º–∏–Ω–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", call.message.chat.id, call.message.message_id, reply_markup=kb)
        return

    # 9) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    if data.startswith("confirm_") and uid in ADMINS:
        tch, ds, hr = data.split("_")[1:]
        schedule[tch][ds][hr]["status"] = "confirmed"
        save_schedule(schedule)
        entry = schedule[tch][ds][hr]
        bot.answer_callback_query(call.id, text="–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        bot.send_message(entry["user_id"], MESSAGES["booking_confirmed"].format(teacher=tch, date=ds, hour=hr), parse_mode="Markdown")
        logging.info(f"Admin {uid} confirmed booking {tch} {ds} {hr}")
        return

    # 10) –†—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
    if data.startswith("del_") and uid in ADMINS:
        tch, ds, hr = data.split("_")[1:]
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"do_del_{tch}_{ds}_{hr}"))
        kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",       callback_data="admin"))
        bot.send_message(call.message.chat.id, f"–£–¥–∞–ª–∏—Ç—å {tch} {ds} {hr}?", reply_markup=kb)
        return

    if data.startswith("do_del_") and uid in ADMINS:
        tch, ds, hr = data.split("_")[1:]
        del schedule[tch][ds][hr]
        if not schedule[tch][ds]: del schedule[tch][ds]
        save_schedule(schedule)
        bot.answer_callback_query(call.id, text="–£–¥–∞–ª–µ–Ω–æ.")
        logging.info(f"Admin {uid} deleted booking {tch} {ds} {hr}")
        return

    # ‚Äî –í–ê–ñ–ù–û ‚Äî –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    logging.warning(f"Unhandled callback_data: '{data}' from {uid}")
    bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    # ‚Äî –∞–¥–º–∏–Ω–∫–∞ ‚Äî
    elif data == 'admin' and user_id in ADMINS:
        m = InlineKeyboardMarkup()
        m.add(InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="all"))
        m.add(InlineKeyboardButton("üìÖ –ü–æ –¥–Ω—é", callback_data="byday"))
        m.add(InlineKeyboardButton("üÜì –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã", callback_data="free"))
        bot.edit_message_text("–ê–¥–º–∏–Ω–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", call.message.chat.id, call.message.message_id, reply_markup=m)

    elif data == 'all' and user_id in ADMINS:
        text = format_schedule()
        bot.send_message(call.message.chat.id, text, parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif data == 'byday' and user_id in ADMINS:
        m = InlineKeyboardMarkup()
        for day in DAYS:
            m.add(InlineKeyboardButton(day, callback_data=f"dayview_{day}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", call.message.chat.id, call.message.message_id, reply_markup=m)

    elif data.startswith("dayview_") and user_id in ADMINS:
        day = data.split("_",1)[1]
        text = format_schedule(day)
        bot.send_message(call.message.chat.id, text, parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif data == 'free' and user_id in ADMINS:
        text = format_schedule()
        # –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ
        lines = []
        for line in text.split('\n'):
            if '‚Äî _—Å–≤–æ–±–æ–¥–Ω–æ_' in line or line.startswith('üîπ'):
                lines.append(line)
        bot.send_message(call.message.chat.id, "\n".join(lines), parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif data.startswith("delete_") and user_id in ADMINS:
        _, day, hour = data.split("_",2)
        name = schedule_data[day][hour]['name']
        m = InlineKeyboardMarkup()
        m.add(InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"do_delete_{day}_{hour}"))
        m.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin"))
        bot.send_message(call.message.chat.id,
                         f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n*{day}, {hour} ‚Äî {name}*",
                         parse_mode='Markdown', reply_markup=m)

    elif data.startswith("do_delete_") and user_id in ADMINS:
        _, day, hour = data.split("_",2)
        del schedule_data[day][hour]
        if not schedule_data[day]:
            del schedule_data[day]
        save_schedule(schedule_data)
        bot.send_message(call.message.chat.id,
                         f"‚úÖ –ó–∞–ø–∏—Å—å {day}, {hour} —É–¥–∞–ª–µ–Ω–∞.")
        bot.answer_callback_query(call.id)

    else:
        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–†–û–ù–ò ===
def finalize_booking(message, day, hour, user_id):
    name = message.text.strip()
    book_slot(day, hour, user_id, name)
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id,
                     f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ *{day}* –≤ *{hour}* –∫–∞–∫ *{name}*.",
                     parse_mode='Markdown')
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    note = (f"üìù *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n"
            f"üë§ {name} (ID {user_id})\n"
            f"üìÖ {day} {hour}")
    for adm_id in ADMINS:
        bot.send_message(adm_id, note, parse_mode='Markdown')

bot.infinity_polling()
