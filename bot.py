from dotenv import load_dotenv
load_dotenv()

import os
import logging
import time
import psycopg2
from psycopg2.extras import DictCursor
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from flask import Flask
from threading import Thread

import telebot
from telebot import types

# ------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï -------------------
logging.basicConfig(level=logging.INFO)
telebot.logger.setLevel(logging.DEBUG)

# ------------------- HTTP SERVER –¥–ª—è UptimeRobot -------------------
app = Flask(__name__)

@app.route("/")
def ping():
    return "OK", 200

def run_web():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

Thread(target=run_web, daemon=True).start()

# ------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï -------------------
TOKEN = os.getenv("TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
DB_URL = os.getenv("DB_URL")
TIMEZONE = ZoneInfo(os.getenv("TIMEZONE", "Asia/Tbilisi"))

if not TOKEN or not ADMIN_IDS or not DB_URL:
    raise RuntimeError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ .env: TOKEN, ADMIN_IDS –∏ DB_URL")

bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()

# ------------------- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï -------------------
def get_conn():
    return psycopg2.connect(DB_URL, cursor_factory=DictCursor)

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    # appointments
    cur.execute("""
        CREATE TABLE IF NOT EXISTS appointments (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            fullname TEXT,
            phone TEXT,
            teacher TEXT,
            date DATE,
            time TEXT,
            status TEXT DEFAULT 'pending', -- pending, approved, cancel_requested, cancelled
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        )
    """)
    # users
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            fullname TEXT,
            last_success TIMESTAMP,
            is_special BOOL DEFAULT FALSE
        )
    """)
    # materials
    cur.execute("""
        CREATE TABLE IF NOT EXISTS materials (
            id SERIAL PRIMARY KEY,
            title TEXT,
            url TEXT,
            category TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# ------------------- –ú–ê–¢–ï–†–ò–ê–õ–´ (–ü–†–ò–ú–ï–†) -------------------
def preload_materials():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT count(*) FROM materials")
    if cur.fetchone()[0] == 0:
        materials = [
            ("–í–∏–¥–µ–æ —É—Ä–æ–∫: –∫–∞–∫ –Ω–µ –±–æ—è—Ç—å—Å—è –ø–µ—Ç—å", "https://youtu.be/PjETXaGWPOY?si=MyFStY9e_27UMJZ1", "video"),
            ("–í–∏–¥–µ–æ: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–æ–ª–æ—Å–∞", "https://youtu.be/yOOBTaE_pbI?si=vfcPekxvTQlO7tuv", "video"),
            ("–ü–ª–µ–π–ª–∏—Å—Ç —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏", "https://youtube.com/playlist?list=PLyYODOfmFKhfv9p2S33RpELWIMCh45Pz4&si=JZyyuFTaFaYqHT89", "video"),
            ("–°—Ç–∞—Ç—å—è: –ø–æ—á–µ–º—É –º—ã –±–æ–∏–º—Å—è —Å—Ü–µ–Ω—ã", "https://dzen.ru/a/ZOTlwIPR0RvVlv5u", "article"),
            ("–ö–Ω–∏–≥–∞: –ü–æ–π—Ç–µ –∫–∞–∫ –∑–≤—ë–∑–¥—ã", "https://royallib.com/book/riggs_set/poyte_kak_zvyozdi.html", "book")
        ]
        for t, u, c in materials:
            cur.execute("INSERT INTO materials (title, url, category) VALUES (%s, %s, %s)", (t, u, c))
    conn.commit()
    conn.close()

preload_materials()

# ------------------- –•–†–ê–ù–ò–õ–ò–©–ï –í–†–ï–ú–ï–ù–ù–´–• –î–ê–ù–ù–´–• -------------------
user_data = {}

# ------------------- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ -------------------
def show_main_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫', 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
    kb.add('üåà –î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    bot.send_message(chat_id, "‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=kb)

# ------------------- –ü–†–ò–í–ï–¢–°–¢–í–ò–ï -------------------
@bot.message_handler(commands=['start'])
def cmd_start(msg):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–≠—Ç–æ <b>Joolay Vocal Studio</b>. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏, –∞ –µ—â—ë ‚Äî "
        "–æ—Ç–∫—Ä–æ—é –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–ª—è —Å–≤–æ–∏—Ö! üòâ\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —è —Ä—è–¥–æ–º."
    )
    bot.send_message(msg.chat.id, text, parse_mode='HTML')
    show_main_menu(msg.chat.id)

@bot.message_handler(func=lambda m: m.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def main_menu(msg):
    show_main_menu(msg.chat.id)

# ------------------- –ö–û–ù–¢–ê–ö–¢–´ -------------------
@bot.message_handler(func=lambda m: m.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
def show_contacts(msg):
    text = (
        "üë©‚Äçüè´ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:</b>\n"
        "‚Ä¢ <a href=\"https://t.me/joolay_joolay\">–Æ–ª—è</a>\n"
        "‚Ä¢ <a href=\"https://t.me/tornik_e\">–¢–æ—Ä–Ω–∏–∫–µ</a>\n"
        "‚Ä¢ <b>–ú–∞—Ä–∏–Ω–∞</b> <i>(—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</i>\n\n"
        "ü§ù <b>–í–æ–ø—Ä–æ—Å—ã/–†–µ–∫–ª–∞–º–∞:</b> <a href=\"https://t.me/joolay_vocal\">@joolay_vocal</a> <i>[biz]</i>\n\n"
        "üè¢ <b>–ê–¥—Ä–µ—Å:</b>\n"
        "Joolay Vocal Studio\n"
        "2/7, Zaarbriuken Square, Tbilisi\n"
        "üìç <a href=\"https://maps.app.goo.gl/XtXSVWX2exaRmHpp9\">–ù–∞ –∫–∞—Ä—Ç–µ</a>"
    )
    bot.send_message(msg.chat.id, text, parse_mode='HTML', disable_web_page_preview=True)

# ------------------- –î–û–ü. –ú–ê–¢–ï–†–ò–ê–õ–´ (–¢–û–õ–¨–ö–û –î–õ–Ø ‚Äú–ò–ó–ë–†–ê–ù–ù–´–•‚Äù) -------------------
@bot.message_handler(func=lambda m: m.text == 'üåà –î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
def show_materials(msg):
    uid = msg.from_user.id
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT is_special FROM users WHERE user_id=%s", (uid,))
    row = cur.fetchone()
    conn.close()
    if row and row['is_special']:
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("SELECT title, url, category FROM materials ORDER BY id")
        materials = cur.fetchall()
        conn.close()
        if not materials:
            bot.send_message(msg.chat.id, "‚è≥ –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")
        else:
            text = "üéì <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n\n"
            for t, url, cat in materials:
                text += f"‚Ä¢ <a href=\"{url}\">{t}</a>\n"
            bot.send_message(msg.chat.id, text, parse_mode='HTML', disable_web_page_preview=True)
    else:
        bot.send_message(msg.chat.id, "üåà –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —É—á–µ–Ω–∏–∫–∞–º, –ø—Ä–æ—à–µ–¥—à–∏–º —Ö–æ—Ç—è –±—ã 1 —É—Ä–æ–∫.")
    show_main_menu(msg.chat.id)

# ------------------- –ó–ê–ü–ò–°–¨ –ù–ê –£–†–û–ö -------------------
@bot.message_handler(func=lambda m: m.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫')
def choose_teacher(msg):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton('–Æ–ª—è', callback_data='teacher:–Æ–ª—è'))
    kb.add(types.InlineKeyboardButton('–¢–æ—Ä–Ω–∏–∫–µ', callback_data='teacher:–¢–æ—Ä–Ω–∏–∫–µ'))
    kb.add(types.InlineKeyboardButton('–ú–∞—Ä–∏–Ω–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', callback_data='teacher:–ú–∞—Ä–∏–Ω–∞'))
    bot.send_message(msg.chat.id, "–ö –∫–∞–∫–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith('teacher:'))
def cb_teacher(c):
    teacher = c.data.split(':', 1)[1]
    uid = c.from_user.id
    if teacher == "–ú–∞—Ä–∏–Ω–∞":
        bot.answer_callback_query(c.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ú–∞—Ä–∏–Ω—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è üõ†")
        return
    user_data[uid] = {'teacher': teacher}
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    m = bot.send_message(c.message.chat.id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–ò–û)", reply_markup=kb)
    bot.register_next_step_handler(m, process_name)

def process_name(msg):
    if msg.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return show_main_menu(msg.chat.id)
    uid = msg.from_user.id
    user_data[uid]['fullname'] = msg.text.strip()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    m = bot.send_message(msg.chat.id, "–û—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä):", reply_markup=kb)
    bot.register_next_step_handler(m, process_phone)

def process_phone(msg):
    if msg.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return show_main_menu(msg.chat.id)
    uid = msg.from_user.id
    user_data[uid]['phone'] = msg.text.strip()
    send_date_selection(msg)

def send_date_selection(msg):
    uid = msg.from_user.id
    teacher = user_data[uid]['teacher']
    today = datetime.now(TIMEZONE).date()
    kb = types.InlineKeyboardMarkup(row_width=4)
    if teacher == "–¢–æ—Ä–Ω–∏–∫–µ":
        days = [0, 4, 5, 6]  # –ø–Ω, –ø—Ç, —Å–±, –≤—Å
    else:
        days = [1, 2, 3, 4]  # –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç
    for d in range(14):
        day = today + timedelta(days=d)
        if day.weekday() in days:
            kb.add(types.InlineKeyboardButton(
                day.strftime('%d/%m'), callback_data=f"date:{day.isoformat()}"
            ))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_menu'))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'back_menu')
def back_menu(c):
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    show_main_menu(c.message.chat.id)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('date:'))
def cb_date(c):
    uid = c.from_user.id
    teacher = user_data[uid]['teacher']
    date_iso = c.data.split(':', 1)[1]
    user_data[uid]['date'] = date_iso
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    kb = types.InlineKeyboardMarkup(row_width=4)
    if teacher == "–¢–æ—Ä–Ω–∏–∫–µ":
        for hour in range(8, 24):
            slot = f"{hour:02d}:00"
            kb.add(types.InlineKeyboardButton(slot, callback_data=f"time:{slot}"))
    else:
        for hour in range(15, 21):
            slot = f"{hour:02d}:00"
            kb.add(types.InlineKeyboardButton(slot, callback_data=f"time:{slot}"))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_menu'))
    bot.send_message(c.message.chat.id, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", reply_markup=kb)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('time:'))
def cb_time(c):
    uid = c.from_user.id
    slot = c.data.split(':', 1)[1]
    user_data[uid]['time'] = slot
    finalize_appointment(c.message)

def finalize_appointment(msg):
    uid = msg.chat.id
    d = user_data.get(uid, {})
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO appointments (user_id, fullname, phone, teacher, date, time)
        VALUES (%s, %s, %s, %s, %s, %s)
        RETURNING id
    """, (uid, d['fullname'], d['phone'], d['teacher'], d['date'], d['time']))
    appt_id = cur.fetchone()[0]
    conn.commit()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –§–ò–û)
    cur.execute("""
        INSERT INTO users (user_id, fullname) VALUES (%s, %s)
        ON CONFLICT (user_id) DO UPDATE SET fullname=EXCLUDED.fullname
    """, (uid, d['fullname']))
    conn.commit()
    conn.close()

    bot.send_message(uid, "‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —É—Ä–æ–∫! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç ‚Äî –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å üòä")
    text = (
        f"üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appt_id}\n"
        f"üë§ {d['fullname']}\n"
        f"üì± {d['phone']}\n"
        f"üßë‚Äçüè´ {d['teacher']}\n"
        f"üìÖ {d['date']} {d['time']}"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"admin_approve:{appt_id}"),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"admin_reject:{appt_id}")
    )
    for aid in ADMIN_IDS:
        bot.send_message(aid, text, reply_markup=kb)
    show_main_menu(uid)

# ------------------- –ê–î–ú–ò–ù–°–ö–û–ï –û–î–û–ë–†–ï–ù–ò–ï/–û–¢–ö–õ–û–ù–ï–ù–ò–ï -------------------
@bot.callback_query_handler(func=lambda c: c.data.startswith('admin_approve:') or c.data.startswith('admin_reject:'))
def process_admin_decision(c):
    data = c.data
    appt_id = data.split(':', 1)[1]

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT user_id, teacher, date, time, fullname FROM appointments WHERE id=%s", (appt_id,))
    row = cur.fetchone()
    if not row:
        bot.answer_callback_query(c.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        conn.close()
        return

    user_id, teacher, date, time_slot, fullname = row['user_id'], row['teacher'], row['date'], row['time'], row['fullname']
    if data.startswith('admin_approve:'):
        cur.execute("UPDATE appointments SET status='approved', updated_at=NOW() WHERE id=%s", (appt_id,))
        # –°—Ç–∞–≤–∏–º is_special=True –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Ä–æ–∫
        cur.execute("""
            UPDATE users SET is_special=TRUE WHERE user_id=%s
        """, (user_id,))
        conn.commit()
        bot.send_message(user_id, "‚úÖ –£—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ –≤—Å—Ç—Ä–µ—á–∏ üëã")
        bot.answer_callback_query(c.id, "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
        teacher_notify = {
            "–Æ–ª—è": 388183067,       # id —á–∞—Ç–∞, –º–æ–∂–Ω–æ —Ä—É–∫–∞–º–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π
            "–¢–æ—Ä–Ω–∏–∫–µ": 123456789,   # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ id –¢–æ—Ä–Ω–∏–∫–µ
            "–ú–∞—Ä–∏–Ω–∞": None          # –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω
        }
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ id —É–∫–∞–∑–∞–Ω (–∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
        tid = teacher_notify.get(teacher)
        if tid:
            t_text = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ —á–∞—Å —É—Ä–æ–∫!\n"
                f"–£—á–µ–Ω–∏–∫: {fullname}\n"
                f"–î–∞—Ç–∞: {date} {time_slot}"
            )
            bot.send_message(tid, t_text)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∑–∞ 1 —á–∞—Å (–ø—Å–µ–≤–¥–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        def schedule_reminder():
            appt_time = datetime.combine(date, datetime.strptime(time_slot, "%H:%M").time()).replace(tzinfo=TIMEZONE)
            now = datetime.now(TIMEZONE)
            delay = (appt_time - now - timedelta(hours=1)).total_seconds()
            if delay > 0:
                time.sleep(delay)
            try:
                bot.send_message(user_id, f"‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å —Ç–≤–æ–π —É—Ä–æ–∫ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher}! –ù–µ –∑–∞–±—É–¥—å ü§ó")
                if tid:
                    bot.send_message(tid, f"‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å —É —Ç–µ–±—è —É—Ä–æ–∫ —Å {fullname} ({date} {time_slot})")
            except Exception as ex:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {ex}")
        Thread(target=schedule_reminder, daemon=True).start()
    else:
        cur.execute("UPDATE appointments SET status='cancelled', updated_at=NOW() WHERE id=%s", (appt_id,))
        conn.commit()
        bot.send_message(user_id, "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º. –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        bot.answer_callback_query(c.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    conn.close()

# ------------------- –ú–û–ò –ó–ê–ü–ò–°–ò -------------------
@bot.message_handler(func=lambda m: m.text == 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
def my_appointments(msg):
    uid = msg.from_user.id
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        SELECT id, teacher, date, time, status FROM appointments
        WHERE user_id=%s ORDER BY created_at DESC LIMIT 3
    """, (uid,))
    rows = cur.fetchall()
    conn.close()
    if not rows:
        bot.send_message(msg.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        show_main_menu(msg.chat.id)
        return
    text = "üóì <b>–¢–≤–æ–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for row in rows:
        appt_id, teacher, date, time_slot, status = row
        status_str = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if status == "pending" else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if status == "approved" else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        text += f"‚Ä¢ {teacher} ‚Äî {date} {time_slot} ({status_str})\n"
    bot.send_message(msg.chat.id, text, parse_mode='HTML')
    show_main_menu(msg.chat.id)

# ------------------- –û–®–ò–ë–ö–ò –∏ –°–¢–ê–†–¢ -------------------
@bot.message_handler(func=lambda m: True)
def fallback(msg):
    show_main_menu(msg.chat.id)

if __name__ == '__main__':
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logging.error(f"Polling —É–ø–∞–ª: {e}")
            time.sleep(3)
