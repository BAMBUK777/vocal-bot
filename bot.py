from dotenv import load_dotenv
load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

import os
import time
import sqlite3
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from flask import Flask
from threading import Thread

import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

# ---------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------------
logging.basicConfig(level=logging.INFO)
telebot.logger.setLevel(logging.DEBUG)

# ---------------- –ú–∏–Ω–∏-–≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks ----------------
app = Flask(__name__)
@app.route("/")
def ping():
    return "OK", 200

def run_web():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

Thread(target=run_web, daemon=True).start()

# ---------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------
TOKEN     = os.getenv("TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
DB_PATH   = os.getenv("DB_PATH", "vocal_lessons.db")
TIMEZONE  = ZoneInfo(os.getenv("TIMEZONE", "Asia/Tbilisi"))

if not TOKEN or not ADMIN_IDS:
    raise RuntimeError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ .env: TOKEN –∏ ADMIN_IDS")

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TeleBot ----------------
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()  # —Å–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö webhooks

# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ----------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS appointments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        fullname TEXT,
        phone TEXT,
        teacher TEXT,
        date TEXT,
        time TEXT,
        status TEXT DEFAULT 'pending',
        reminder_sent INTEGER DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

init_db()

# ---------------- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ----------------
user_data = {}

# ---------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------------
def show_main_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫', '–ú–æ—è –∑–∞–ø–∏—Å—å', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@bot.message_handler(commands=['start'])
def cmd_start(msg):
    show_main_menu(msg.chat.id)

# ---------------- –ö–æ–Ω—Ç–∞–∫—Ç—ã ----------------
@bot.message_handler(func=lambda m: m.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
def show_contacts(msg):
    text = (
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +995 123 456 789\n"
        "‚úâÔ∏è Email: example@joolay.vocal\n"
        "\nüî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥\n\n"
        "<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:</b>\n"
        " ‚Ä¢ <b>–Æ–ª—è</b>\n"
        " ‚Ä¢ <b>–¢–æ—Ä–Ω–∏–∫–µ</b>\n\n"
        "<b>–ê–¥—Ä–µ—Å:</b>\n"
        "Joolay Vocal Studio\n"
        "2/7, Zaarbriuken Square, Tbilisi\n"
        "üìç <a href=\"https://maps.app.goo.gl/XtXSVWX2exaRmHpp9\">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>"
    )
    bot.send_message(
        msg.chat.id, text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=types.ReplyKeyboardRemove()
    )
    # –≤–µ—Ä–Ω—ë–º –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
    show_main_menu(msg.chat.id)

# ---------------- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ ----------------
@bot.message_handler(func=lambda m: m.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫')
def choose_teacher(msg):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('–Æ–ª—è', callback_data='select_teacher:–Æ–ª—è'),
        types.InlineKeyboardButton('–¢–æ—Ä–Ω–∏–∫–µ', callback_data='select_teacher:–¢–æ—Ä–Ω–∏–∫–µ')
    )
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'back')
def cb_back(c):
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    show_main_menu(c.message.chat.id)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_teacher:'))
def cb_select_teacher(c):
    teacher = c.data.split(':',1)[1]
    uid = c.from_user.id
    user_data[uid] = {'teacher': teacher}
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    m = bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=kb)
    bot.answer_callback_query(c.id)
    bot.register_next_step_handler(m, process_name)

def process_name(msg):
    if msg.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return show_main_menu(msg.chat.id)
    uid = msg.from_user.id
    user_data[uid]['fullname'] = msg.text.strip()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    m = bot.send_message(
        msg.chat.id,
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç TG –∏–ª–∏ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:",
        reply_markup=kb
    )
    bot.register_next_step_handler(m, process_phone)

def process_phone(msg):
    if msg.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return show_main_menu(msg.chat.id)
    uid = msg.from_user.id
    user_data[uid]['phone'] = msg.text.strip()
    send_date_selection(msg)

def send_date_selection(msg):
    today = datetime.now(TIMEZONE).date()
    kb = types.InlineKeyboardMarkup(row_width=4)
    for d in range(14):
        day = today + timedelta(days=d)
        if 1 <= day.weekday() <= 4:  # –≤—Ç‚Äì–ø—Ç
            kb.add(types.InlineKeyboardButton(
                day.strftime('%d/%m'),
                callback_data=f"select_date:{day.isoformat()}"
            ))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_date:'))
def cb_select_date(c):
    if c.data == 'back':
        return cb_back(c)
    date_iso = c.data.split(':',1)[1]
    uid = c.from_user.id
    user_data[uid]['date'] = date_iso
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, None)
    kb = types.InlineKeyboardMarkup(row_width=4)
    for hour in range(14, 23):
        slot = f"{hour:02d}:00"
        kb.add(types.InlineKeyboardButton(slot, callback_data=f"select_time:{slot}"))
    kb.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(c.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_time:'))
def cb_select_time(c):
    if c.data == 'back':
        return cb_back(c)
    slot = c.data.split(':',1)[1]
    uid = c.from_user.id
    user_data[uid]['time'] = slot
    finalize_appointment(c.message)

def finalize_appointment(msg):
    uid = msg.chat.id
    d = user_data.get(uid, {})
    conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
    cur.execute("""
        INSERT INTO appointments
        (user_id, fullname, phone, teacher, date, time)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (uid, d['fullname'], d['phone'], d['teacher'], d['date'], d['time']))
    appt_id = cur.lastrowid
    conn.commit(); conn.close()

    bot.send_message(uid, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                     reply_markup=types.ReplyKeyboardRemove())

    text = (f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appt_id}\n"
            f"–£—á–µ–Ω–∏–∫: {d['fullname']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {d['phone']}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {d['teacher']}\n"
            f"–î–∞—Ç–∞: {d['date']} –≤ {d['time']}")
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"admin_approve:{appt_id}"),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',  callback_data=f"admin_reject:{appt_id}")
    )
    for aid in ADMIN_IDS:
        bot.send_message(aid, text, reply_markup=kb)

# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ----------------
@bot.callback_query_handler(func=lambda c: c.data.startswith('admin_'))
def process_admin_decision(call: types.CallbackQuery):
    action, appt_id = call.data.split(':',1)
    conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
    cur.execute("SELECT user_id, date, time FROM appointments WHERE id = ?", (appt_id,))
    row = cur.fetchone()
    if not row:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        conn.close()
        return
    user_id, date_iso, time_slot = row
    if action == 'admin_approve':
        cur.execute("UPDATE appointments SET status='approved' WHERE id = ?", (appt_id,))
        conn.commit()
        bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date_iso} –≤ {time_slot} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∞.")
    else:
        cur.execute("DELETE FROM appointments WHERE id = ?", (appt_id,))
        conn.commit()
        bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    conn.close()

# ---------------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ ----------------
def send_reminders():
    now = datetime.now(TIMEZONE)
    conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
    cur.execute("""
        SELECT id, fullname, teacher, date, time
          FROM appointments
         WHERE status='approved' AND reminder_sent=0
    """)
    for appt_id, fullname, teacher, date_iso, time_slot in cur.fetchall():
        dt = datetime.fromisoformat(f"{date_iso}T{time_slot}").replace(tzinfo=TIMEZONE)
        if 0 <= (dt - now).total_seconds() <= 3600:
            text = (f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É—Ä–æ–∫ #{appt_id}\n"
                    f"–£—á–µ–Ω–∏–∫: {fullname}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
                    f"–í—Ä–µ–º—è: {date_iso} {time_slot}")
            for aid in ADMIN_IDS:
                bot.send_message(aid, text)
            cur.execute("UPDATE appointments SET reminder_sent=1 WHERE id = ?", (appt_id,))
    conn.commit(); conn.close()

def clean_past_appointments():
    cutoff = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
    conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
    cur.execute("""
        DELETE FROM appointments
         WHERE status='approved'
           AND datetime(date || ' ' || time) < ?
    """, (cutoff,))
    conn.commit(); conn.close()

# ---------------- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ polling ----------------
if __name__ == '__main__':
    sched = BackgroundScheduler(timezone=TIMEZONE)
    sched.add_job(send_reminders, 'interval', minutes=1)
    sched.add_job(clean_past_appointments, 'cron', hour=0, minute=0)
    sched.start()

    # —Å–±—Ä–æ—Å–∏–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ getUpdates
    bot.delete_webhook()

    # –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π polling —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ 409 –∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö
    while True:
        try:
            bot.infinity_polling(
                timeout=60,
                long_polling_timeout=60,
                skip_pending=True,
                non_stop=True
            )
        except Exception:
            logging.exception("Polling —É–ø–∞–ª–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫‚Ä¶")
            time.sleep(1)
